#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
spring:
  application.name: ${artifactId}
  dataSource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${DB_HOSTNAME}:${DB_PORT}/${DB_NAME}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  flyway:
    enabled: true
    locations: classpath:db/migration
  # use JWT because using keycloak as OIDC, and it only natively support JWT
  security:
    oauth2:
      resourceserver:
        jwt:
          # To validate iss claim, this MUST match the public-facing URL from KC_HOSTNAME
          # Addressing mess of accessing keycloak in local machine vs cluster
#          issuer-uri: ${AUTH_SERVER_K8S_SERVICE_URI:http://keycloak.local:8081}/realms/${APP_REALM:showcase}
          issuer-uri: ${AUTH_SERVER_K8S_SERVICE_URI}/realms/${APP_REALM}
          # 2. For FETCHING the security keys from WITHIN the cluster.
          #    This MUST use the internal Kubernetes service name.
#          jwk-set-uri: ${AUTH_SERVER_K8S_SERVICE_URI:http://keycloak:8080}/realms/${APP_REALM:showcase}/protocol/openid-connect/certs
          jwk-set-uri: ${AUTH_SERVER_K8S_SERVICE_URI}/realms/${APP_REALM}/protocol/openid-connect/certs


logging:
  level:
    root: debug
    sun: INFO
    javax.management: INFO

management:
  server.port: 9000
  endpoint:
    health.probes.enabled: true
  health:
    livenessState.enabled: true
    readinessState.enabled: true